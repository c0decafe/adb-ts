/// <reference types="node" />
import { CommandConstruct, CpOptions, DeviceState, ForwardsObject, IAdbDevice, InputOptions, InputSource, InstallOptions, KeyStringObject, LogcatOptions, MkDirOptions, MvOptions, ReversesObject, RmOption, SettingsMode, SimpleType, StartActivityOptions, StartServiceOptions, TouchOptions, TransportType, UninstallOptions } from '.';
import AdbClient from './client';
import Connection from './connection';
import FileStats from './filestats';
import Jimp from 'jimp';
import { KeyCode } from './keycode';
import LogcatReader from './logcat/reader';
import Monkey from './monkey/client';
import Promise from 'bluebird';
import PullTransfer from './sync/pulltransfer';
import PushTransfer from './sync/pushtransfer';
import { Readable } from 'stream';
import Stats from './sync/stats';
import SyncEntry from './sync/entry';
import { SyncMode } from './sync';
export default class AdbDevice implements IAdbDevice {
    id: string;
    state: DeviceState;
    path: string;
    device: string;
    model: string;
    product: string;
    transportId?: string;
    transport: TransportType;
    private client;
    constructor(client: AdbClient, props?: IAdbDevice);
    getSerialNo(cb?: (err: Error, value: string) => void): Promise<string | number | boolean>;
    getDevicePath(cb?: (err: Error, value: string) => void): Promise<string>;
    listProperties(cb?: (err: Error, value: KeyStringObject) => void): Promise<KeyStringObject>;
    listFeatures(cb?: (err: Error, value: KeyStringObject) => void): Promise<KeyStringObject>;
    listPackages(cb?: (err: Error, value: string[]) => void): Promise<string[]>;
    getIpAddress(cb?: (err: Error, value?: string) => void): Promise<string>;
    forward(local: string, remote: string, cb?: (err: Error) => void): Promise<void>;
    listForwards(cb?: (err: Error, value: ForwardsObject[]) => void): Promise<ForwardsObject[]>;
    reverse(local: string, remote: string, cb?: (err: Error) => void): Promise<void>;
    listReverses(cb?: (err: Error, value: ReversesObject[]) => void): Promise<ReversesObject[]>;
    shell(command: string | string[], cb?: (err: Error, value: string) => void): Promise<string | number | boolean>;
    reboot(cb?: (err: Error) => void): Promise<void>;
    shutdown(cb?: (err: Error) => void): Promise<void>;
    remount(cb?: (err: Error) => void): Promise<void>;
    root(cb?: (err: Error) => void): Promise<void>;
    screenshot(cb?: (err: Error, value: Jimp) => void): Promise<Jimp>;
    openTcp(port: number | string, cb?: (err: Error, value: Connection) => void): Promise<Connection>;
    openTcp(port: number | string, host?: string, cb?: (err: Error, value: Connection) => void): Promise<Connection>;
    openLogcat(cb?: (err: Error, value: LogcatReader) => void): Promise<LogcatReader>;
    openLogcat(options?: LogcatOptions, cb?: (err: Error, value: LogcatReader) => void): Promise<LogcatReader>;
    clear(pkg: string, cb?: (err: Error) => void): Promise<void>;
    install(apk: string | Readable, cb?: (err: Error) => void): Promise<void>;
    install(apk: string | Readable, options?: InstallOptions, cb?: (err: Error) => void): Promise<void>;
    install(apk: string | Readable, options?: InstallOptions, args?: string, cb?: (err: Error) => void): Promise<void>;
    uninstall(pkg: string, cb?: (err: Error) => void): Promise<void>;
    uninstall(pkg: string, options?: UninstallOptions, cb?: (err: Error) => void): Promise<void>;
    isInstalled(pkg: string, cb?: (err: Error, value: boolean) => void): Promise<boolean>;
    startActivity(pkg: string, activity: string, cb?: (err: Error) => void): Promise<void>;
    startActivity(pkg: string, activity: string, options?: StartActivityOptions, cb?: (err: Error) => void): Promise<void>;
    startService(pkg: string, service: string, cb?: (err: Error) => void): any;
    startService(pkg: string, service: string, options?: StartServiceOptions, cb?: (err: Error) => void): Promise<void>;
    stat(path: string, cb?: (err: Error, value: Stats) => void): Promise<Stats>;
    readDir(path: string, cb?: (err: Error, value: SyncEntry[]) => void): Promise<SyncEntry[]>;
    pushDataToFile(data: string, destPath: string, cb?: (err: Error) => void): Promise<void>;
    pushFile(srcPath: string, destPath: string, cb?: (err: Error) => void): Promise<void>;
    pullDataFromFile(srcPath: string, cb?: (err: Error, value: string) => void): Promise<string>;
    pullFile(srcPath: string, destPath: string, cb?: (err: Error) => void): Promise<void>;
    pull(path: string, cb?: (err: Error, value: PullTransfer) => void): Promise<PullTransfer>;
    push(srcPath: string | Readable, destPath: string, cb?: (err: Error, value: PushTransfer) => void): Promise<PushTransfer>;
    push(srcPath: string | Readable, destPath: string, mode?: SyncMode, cb?: (err: Error, value: PushTransfer) => void): Promise<PushTransfer>;
    tcpip(port?: number, cb?: (err: Error, value: string) => void): Promise<string>;
    usb(cb?: (err: Error) => void): Promise<void>;
    waitBootComplete(cb?: (err: Error) => void): Promise<void>;
    listSettings(mode: SettingsMode, cb?: (err: Error, value: KeyStringObject) => void): Promise<KeyStringObject>;
    getProp(prop: string, cb?: (err: Error, value: SimpleType) => void): Promise<string | number | boolean>;
    setProp(prop: string, value: SimpleType, cb?: (err: Error) => void): Promise<void>;
    getSetting(mode: SettingsMode, name: string, cb?: (err: Error, value: SimpleType) => void): Promise<string | number | boolean>;
    putSetting(mode: SettingsMode, name: string, value: SimpleType, cb?: (err: Error) => void): Promise<void>;
    tap(x: number, y: number, cb?: (err: Error) => void): Promise<void>;
    tap(x: number, y: number, source: InputSource, cb?: (err: Error) => void): Promise<void>;
    text(text: SimpleType, cb?: (err: Error) => void): Promise<void>;
    text(text: SimpleType, source: InputSource, cb?: (err: Error) => void): Promise<void>;
    keyEvent(code: KeyCode | number, cb?: (err: Error) => void): Promise<void>;
    keyEvent(code: KeyCode | number, options?: InputOptions & {
        longpress?: boolean;
    }, cb?: (err: Error) => void): Promise<void>;
    swipe(x1: number, y1: number, x2: number, y2: number, cb?: (err: Error) => void): Promise<void>;
    swipe(x1: number, y1: number, x2: number, y2: number, options?: InputOptions & {
        duration?: number;
    }, cb?: (err: Error) => void): Promise<void>;
    dragAndDrop(x1: number, y1: number, x2: number, y2: number, cb?: (err: Error) => void): Promise<void>;
    dragAndDrop(x1: number, y1: number, x2: number, y2: number, options?: InputOptions & {
        duration?: number;
    }, cb?: (err: Error) => void): Promise<void>;
    press(cb?: (err: Error) => void): Promise<void>;
    press(source?: InputSource, cb?: (err: Error) => void): Promise<void>;
    roll(x: number, y: number, cb?: (err: Error) => void): Promise<void>;
    roll(x: number, y: number, source?: InputSource, cb?: (err: Error) => void): Promise<void>;
    custom<T>(CustomCommand: CommandConstruct, cb?: (err: Error, value: T) => void): Promise<T>;
    openMonkey(cb?: (err: Error, value: Monkey) => void): Promise<Monkey>;
    killApp(pkg: string, cb?: (err: Error) => void): void;
    exec(cmd: string, cb?: (err: Error, value: string) => void): Promise<string>;
    execShell(cmd: string, cb?: (err: Error, value: string) => void): Promise<string>;
    batteryStatus(cb?: (err: Error, value: KeyStringObject) => void): Promise<KeyStringObject>;
    rm(path: string, cb?: (err: Error | null, value: string) => void): Promise<string>;
    rm(path: string, options?: RmOption, cb?: (err: Error | null, value: string) => void): Promise<string>;
    mkdir(path: string, cb?: (err: Error | null, value: string) => void): Promise<string>;
    mkdir(path: string, options?: MkDirOptions, cb?: (err: Error | null, value: string) => void): Promise<string>;
    touch(path: string, cb?: (err: Error | null, value: string) => void): Promise<string>;
    touch(path: string, options?: TouchOptions, cb?: (err: Error | null, value: string) => void): Promise<string>;
    mv(srcPath: string, destPath: string, cb?: (err: Error | null, value: string) => void): Promise<string>;
    mv(srcPath: string, destPath: string, options?: MvOptions, cb?: (err: Error | null, value: string) => void): Promise<string>;
    cp(srcPath: string, destPath: string, cb?: (err: Error | null, value: string) => void): Promise<string>;
    cp(srcPath: string, destPath: string, options?: CpOptions, cb?: (err: Error | null, value: string) => void): Promise<string>;
    fileStat(path: string, cb?: (err: Error | null, value: FileStats) => void): Promise<FileStats>;
}
